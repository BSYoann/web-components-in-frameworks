import t from"https://cdn.skypack.dev/chartist";const e=document.createElement("template");e.innerHTML='\n  <style>\n    *, *::before, *::after {\n      box-sizing: border-box;\n    }\n    :host {\n      --bg-color: #191919;\n      --line-color: #2220a4;\n\n      display: inline-block;\n      overflow: hidden;\n      border-radius: 1rem;\n    }\n    .card {\n      min-width: min-content;\n      width: fit-content;\n      padding: 0.5rem;\n      background: var(--bg-color, #FFF);\n    }\n    .chart, .ct-chart-line {\n      width: 100%;\n      height: 100%;\n    }\n    .ct-line {\n      stroke: var(--line-color, #000);\n      stroke: url(#Gradient1);\n      fill: none;\n      stroke-width: 5px;\n    }\n\n    .grad-bg {\n      color: var(--bg-color, #FFF);\n    }\n    .grad-line {\n      color: var(--line-color, #000);\n    }\n  </style>\n  <svg xmlns="http://www.w3.org/2000/svg" width="0" height="0" style="display: block">\n    <defs>\n      <linearGradient id="Gradient1">\n        <stop class="grad-bg" offset="0%" stop-color="currentColor"/>\n        <stop class="grad-line" offset="10%" stop-color="currentColor"/>\n        <stop class="grad-line" offset="90%" stop-color="currentColor"/>\n        <stop class="grad-bg" offset="100%" stop-color="currentColor"/>\n      </linearGradient>\n    </defs>\n  </svg>\n  <div id="card-root" class="card">\n    <div class="header">\n      <slot></slot>\n    </div>\n    <div id="chart-container" class="chart"></div>\n  </div>\n';const r=["serie","line-color","background-color","chart-width","chart-height"];class i extends HTMLElement{constructor(){super(),this._lineColor=getComputedStyle(this).getPropertyValue("--line-color"),this._backgroundColor=getComputedStyle(this).getPropertyValue("--bg-color"),this._shadowRoot=this.attachShadow({mode:"open"}),this._shadowRoot.appendChild(e.content.cloneNode(!0))}static get observedAttributes(){return r}get chartWidth(){return this._chartWidth}set chartWidth(t){var e;this._chartWidth=t,this.setAttribute("chart-width",null!==(e=null==t?void 0:t.toString(10))&&void 0!==e?e:"")}get chartHeight(){return this._chartHeight}set chartHeight(t){var e;this._chartHeight=t,this.setAttribute("chart-height",null!==(e=null==t?void 0:t.toString(10))&&void 0!==e?e:"")}get serie(){return this._serie}set serie(t){"string"==typeof t&&(t=t.split(", ").map((t=>parseInt(t,10)))),this._serie=t,this.setAttribute("serie",t)}get series(){return this.serie?[this.serie]:[[]]}get lineColor(){return this._lineColor}set lineColor(t){this._lineColor=t,this.setAttribute("line-color",t)}get backgroundColor(){return this._backgroundColor}set backgroundColor(t){this._backgroundColor=t,this.setAttribute("background-color",t)}connectedCallback(){const e=this._shadowRoot.querySelector("#chart-container"),r=this.getAttribute("serie");null!==r&&""!==r&&void 0===this.serie&&(this.serie=r);const i={series:this.series},o=this.getAttribute("chart-height");null!==o&&""!==o&&void 0===this.chartHeight&&(this.chartHeight=o);const s=this.getAttribute("chart-width");null!==s&&""!==s&&void 0===this.chartWidth&&(this.chartWidth=s);const n={height:this.chartHeight,width:this.chartWidth,showPoint:!1,chartPadding:{top:0,right:0,bottom:0,left:20},axisX:{offset:0,showGrid:!1,showLabel:!1},axisY:{offset:0,showGrid:!1,showLabel:!1}};this._chart=new t.Line(e,i,n),this._chart.on("draw",(e=>{if("line"===e.type){let r=e.path.clone().scale(1,0).translate(0,e.chartRect.height()).stringify();this._oldData&&(r=this._oldData.path.clone().stringify()),e.element.animate({d:{begin:2e3*e.index,dur:2e3,from:r,to:e.path.clone().stringify(),easing:t.Svg.Easing.easeOutQuint}}),this._oldData=e}}))}attributeChangedCallback(t,e,r){this._chart&&"serie"===t?this._chart.update({series:this.series}):"line-color"===t?this.style.setProperty("--line-color",r):"background-color"===t?this.style.setProperty("--bg-color",r):this._chart&&"chart-width"===t?this._chart.update(null,{width:r},!0):this._chart&&"chart-height"===t&&this._chart.update(null,{height:r},!0)}}export{i as ChartCard};
