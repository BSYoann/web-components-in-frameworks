import*as t from"https://cdn.skypack.dev/chartist";var e={d:(t,r)=>{for(var i in r)e.o(r,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},r={};e.d(r,{t:()=>a});const i=(n={default:()=>t.default},o={},e.d(o,n),o);var n,o;const s=document.createElement("template");s.innerHTML='\n  <style>\n    *, *::before, *::after {\n      box-sizing: border-box;\n    }\n    :host {\n      --bg-color: #191919;\n      --line-color: #2220a4;\n\n      display: block;\n    }\n    .card {\n      min-width: min-content;\n      width: fit-content;\n      padding: 0.5rem;\n      border-radius: 1rem;\n      background: var(--bg-color, #FFF);\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n    .chart, .ct-chart-line {\n      width: 100%\n      height: 100%;\n    }\n    .ct-line {\n      stroke: var(--line-color, #000);\n      stroke: url(#Gradient1);\n      fill: none;\n      stroke-width: 5px;\n    }\n  </style>\n  <div id="card-root" class="card">\n    <div class="header">\n      <slot></slot>\n    </div>\n    <div id="chart-container" class="chart"></div>\n  </div>\n';class a extends HTMLElement{static get observedAttributes(){return["serie","line-color","background-color","width","height"]}get width(){return this._width}set width(t){this._width=t,this.setAttribute("width",t)}get height(){return this._height}set height(t){this._height=t,this.setAttribute("height",t)}get serie(){return this._serie}set serie(t){"string"==typeof t&&(t=t.split(", ")),this._serie=t,this.setAttribute("serie",t)}get series(){return this.serie?[this.serie]:[[]]}get lineColor(){return this._lineColor}set lineColor(t){this._lineColor=t,this.setAttribute("line-color",t)}get backgroundColor(){return this._backgroundColor}set backgroundColor(t){this._backgroundColor=t,this.setAttribute("background-color",t)}constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(s.content.cloneNode(!0))}connectedCallback(){this.createSVGLineGradient(),this.createLineChart()}attributeChangedCallback(t,e,r){this.chart&&"serie"===t&&e!==r?this.chart.update({series:this.series}):"line-color"===t&&e!==r?this.style.setProperty("--line-color",r):"background-color"===t&&e!==r?this.style.setProperty("--bg-color",r):this.chart&&"width"===t&&e!==r?this.chart.update(null,{width:Number.parseInt(r)},!0):this.chart&&"height"===t&&e!==r&&this.chart.update(null,{height:Number.parseInt(r)},!0)}createSVGLineGradient(){const t=function(t,e){const r=document.createElementNS("http://www.w3.org/2000/svg","svg");for(const t in e)r.setAttributeNS(null,t,e[t]);return r}(0,{width:0,height:0});t.innerHTML='\n      <style>\n        .grad-bg {\n          color: var(--bg-color, #FFF);\n        }\n        .grad-line {\n          color: var(--line-color, #000);\n        }\n      </style>\n      <defs>\n        <linearGradient id="Gradient1">\n          <stop class="grad-bg" offset="0%" stop-color="currentColor"/>\n          <stop class="grad-line" offset="10%" stop-color="currentColor"/>\n          <stop class="grad-line" offset="90%" stop-color="currentColor"/>\n          <stop class="grad-bg" offset="100%" stop-color="currentColor"/>\n        </linearGradient>\n      </defs>\n    ',this.shadowRoot.appendChild(t)}createLineChart(){const t=this.shadowRoot.querySelector("#chart-container");this.chartData={series:this.series},this.chartOptions={height:this.height,width:this.width,showPoint:!1,chartPadding:{top:0,right:0,bottom:0,left:20},axisX:{offset:0,showGrid:!1,showLabel:!1},axisY:{offset:0,showGrid:!1,showLabel:!1}},this.chart=new i.default.Line(t,this.chartData,this.chartOptions),this.chart.on("draw",(t=>{if("line"===t.type){let e=t.path.clone().scale(1,0).translate(0,t.chartRect.height()).stringify();this.oldData&&(e=this.oldData.path.clone().stringify()),t.element.animate({d:{begin:2e3*t.index,dur:2e3,from:e,to:t.path.clone().stringify(),easing:i.default.Svg.Easing.easeOutQuint}}),this.oldData=t}}))}}var h=r.t;export{h as ChartCard};